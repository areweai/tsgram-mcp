# Multi-stage Dockerfile for remote Linux deployment
# Optimized for production with Node.js 22+ and Java 21+

# Build stage
FROM node:22-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    curl

# Copy package files
COPY package*.json tsconfig.json ./
COPY src/ ./src/

# Install dependencies and build
RUN npm ci --only=production && \
    npm run build && \
    npm prune --production

# Production stage
FROM node:22-alpine AS production

# Install runtime dependencies including Java 21+
RUN apk add --no-cache \
    openjdk21-jre \
    curl \
    bash \
    dumb-init \
    && java -version

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

WORKDIR /app

# Copy built application
COPY --from=builder --chown=nodejs:nodejs /app/dist ./dist
COPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nodejs:nodejs /app/package.json ./

# Create required directories
RUN mkdir -p /app/config /app/logs && \
    chown -R nodejs:nodejs /app

USER nodejs

# Expose ports
EXPOSE 3000 8081

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8081/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/index.js"]