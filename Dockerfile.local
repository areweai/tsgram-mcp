# Multi-stage Dockerfile for local Apple Silicon development
# Optimized for development with Node.js 22+ and Java 21+

# Development stage
FROM node:22-alpine AS development

WORKDIR /app

# Install development dependencies including Java 21+
RUN apk add --no-cache \
    openjdk21-jre \
    curl \
    bash \
    git \
    openssh-client \
    vim \
    && java -version

# Install global development tools
RUN npm install -g \
    tsx \
    nodemon \
    @types/node

# Copy package files
COPY package*.json tsconfig.json ./

# Install all dependencies (including dev)
RUN npm install

# Create required directories
RUN mkdir -p /app/config /app/logs /app/src

# Copy source code (will be overridden by volume mount)
COPY src/ ./src/

# Expose ports including debugger
EXPOSE 3000 8081 9229

# Health check
HEALTHCHECK --interval=15s --timeout=5s --start-period=30s --retries=5 \
    CMD curl -f http://localhost:8081/health || exit 1

# Development command with hot reload
CMD ["npm", "run", "dev"]

# Production build stage (for testing)
FROM node:22-alpine AS production

WORKDIR /app

# Install runtime dependencies including Java 21+
RUN apk add --no-cache \
    openjdk21-jre \
    curl \
    bash \
    dumb-init \
    && java -version

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy package files
COPY package*.json tsconfig.json ./
COPY src/ ./src/

# Install dependencies and build
RUN npm ci && \
    npm run build && \
    npm prune --production

# Create required directories
RUN mkdir -p /app/config /app/logs && \
    chown -R nodejs:nodejs /app

USER nodejs

# Expose ports
EXPOSE 3000 8081

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8081/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/index.js"]